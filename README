
SPACEseEN is a JavaScript experimental library to animate 2D or 3D scene on canvases.


This README is for version: July 16, 2013. Version 0.0.65.
This documentation is possibly outdated or incomplete.


spaceen/js/graph        is a core library
spaceen/js/f i l e s    run-time managers and utitilites
spaceen/js/btb          general purpose JS utilities
spaceen/deployer        minifier and deployer
spaceen/php_templater   helps to assembly html and js files into response-page
spaceen/scenarios       data and data generating files. actual art.

There is no database end on server side, php-files are just a convenient tool to retemplate pages.
Land browser on .../index.htm, .../index.prod.htm, for production mode.

In development mode, examples should be landed on files localhost/..../index.php which requires server
like Apache but only to produce simple combination of html-js files.
The project is essentially pure JavaScript.

Download: git clone git@github.com:lancelab/spaceen.git
or download as a zip file.




C u s t o m   s u b a p p l i c a t i o n s    d e v e l o p m e n t

Folder "scenarios" contains scenario-albums and templates.
Scenario-album contains scenarios and templates.

Custome subapplications are called "players" and located under "albums" like:
scenarios/my-album/my-player

By design, new projects can be added to spaceen by copy-pasting
your own folders below "scenarios" folder. Use analogy.

Make your album like scenarios/my-album
Make your project "my-player" like scenarios/my-album/my-player


 Create index.php in the my-player:

    Legend:

		$templates is located one folder-level higher than my-player
    	$album_templates is located two folder-levels higher than my-player


 Landing page is structured:

	top.php				- !DOCTYPE html and document.header beginning
		css-links in increasing priority:

			$scenarios_css
			$album_css
			$player_css
			$warnings_css

	jslinks.dev.php		- script tags.  (This file APPARENTLY MUST BE in scenarios/album/common.tpl folder. )
	
	body begins
		subtop.warnings.php
		body.php
		content.php
	footer.php			


Templates must have extension .tpl or .cont:
.tpl stands for scripts templates, .cont for content common for few scenarios.

The scenario intro/landing is special. 

	landing/index.php,				is a a primary landing page,
	landing/index.php?s_dev			is a development workarea in dev mode
	landing/index.php?s_dev=list	dev mode and without animation on landing page
			parameter s_dev uses file body.dev.php,
			omitting this parameter, triggers use of body.php file.
			body.php and body.dev.php difference is in using ...&s_dev... in links of their texts.
			.../landing/body.php is not coded manually but generated from .../landing/body.dev.php.


R u n n i n g   p l a y e r

 JavaScript configuration data: in order of increasing priority:

	js/generic_conf.js
	my-player/js/conf.js
	my-player/js/flyer.js
	my-player/js/dsprite.js

	( Above configuration files are concatenated into app.js )

	my-player/js/capture.js  or captured-xxxx.js - this line amends all preceding configs.

	URL-query data



C a p t u r i n g    a n d    r e p l a y i n g    c a s t s

Subproject "flyer" generates random parameters for sprites. This makes animation dependable on chance, browser, and
possibly different every time the page is landed.

To capture parameters at specific landing, use Ctrl-e keys.
This will output captured object directly to the screen. Copy-paste it into
file capture.js in app web root or capturedXXXXXX.js.

If capturedXXXXXX.js is to be used, then URL query must contain
 ...&captured=XXXXXX... or
 ...&s_captured=XXXXXX...

(s_ is for server side inclusion)

which will force browser to pick up parameters stored in file capturedXXXXXX.js.

If no URL "capturedXXXXXX" is provided, but captured.js does exist in my-player/js, then capture.js is picked up automatically.
In both cases, "capturedXXXXXX.js" or "capture.js", animation is reproduced exactly the same way as it was captured, but
different browsers may still have some nuances.

Permissions:

 General permissions:
 find .  -type d  -exec chmod -R 775  \{\} \;

 to save captured images: ( bad for production? )
 find .  -type d -name img  -exec chmod -R 777  \{\} \;

 to avoid annoying question in Ubuntu "read or execute":
 find .  -type f -name \*.js  -exec chmod -R 664  \{\} \;

 more help: http://unix.stackexchange.com/questions/21251/why-do-directories-need-the-executable-x-permission-to-be-opened


D e p l o y m e n t

After development is done, run

	deployer/finalize_package.sh
	It requires Ruby.

    It creates app.js, slightly "minified" version of engine bundled with "player".
	See comments in .../deployer files.



W e l c o m e  t o   s n



